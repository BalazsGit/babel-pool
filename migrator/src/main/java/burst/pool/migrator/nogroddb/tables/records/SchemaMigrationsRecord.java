/*
 * This file is generated by jOOQ.
 */
package burst.pool.migrator.nogroddb.tables.records;


import burst.pool.migrator.nogroddb.tables.SchemaMigrations;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaMigrationsRecord extends UpdatableRecordImpl<SchemaMigrationsRecord> implements Record2<Long, Byte> {

    private static final long serialVersionUID = 104946937;

    /**
     * Setter for <code>nogrod_vlp.schema_migrations.version</code>.
     */
    public void setVersion(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>nogrod_vlp.schema_migrations.version</code>.
     */
    public Long getVersion() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>nogrod_vlp.schema_migrations.dirty</code>.
     */
    public void setDirty(Byte value) {
        set(1, value);
    }

    /**
     * Getter for <code>nogrod_vlp.schema_migrations.dirty</code>.
     */
    public Byte getDirty() {
        return (Byte) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Long, Byte> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<Long, Byte> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field1() {
        return SchemaMigrations.SCHEMA_MIGRATIONS.VERSION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Byte> field2() {
        return SchemaMigrations.SCHEMA_MIGRATIONS.DIRTY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component1() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte component2() {
        return getDirty();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value1() {
        return getVersion();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Byte value2() {
        return getDirty();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaMigrationsRecord value1(Long value) {
        setVersion(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaMigrationsRecord value2(Byte value) {
        setDirty(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaMigrationsRecord values(Long value1, Byte value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SchemaMigrationsRecord
     */
    public SchemaMigrationsRecord() {
        super(SchemaMigrations.SCHEMA_MIGRATIONS);
    }

    /**
     * Create a detached, initialised SchemaMigrationsRecord
     */
    public SchemaMigrationsRecord(Long version, Byte dirty) {
        super(SchemaMigrations.SCHEMA_MIGRATIONS);

        set(0, version);
        set(1, dirty);
    }
}
