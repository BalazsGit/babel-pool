/*
 * This file is generated by jOOQ.
 */
package burst.pool.migrator.nogroddb.nogrod.tables.records;


import burst.pool.migrator.nogroddb.nogrod.tables.Account;

import java.sql.Timestamp;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountRecord extends UpdatableRecordImpl<AccountRecord> implements Record7<ULong, String, String, Long, Long, String, Timestamp> {

    private static final long serialVersionUID = -994523488;

    /**
     * Setter for <code>nogrod.account.id</code>.
     */
    public void setId(ULong value) {
        set(0, value);
    }

    /**
     * Getter for <code>nogrod.account.id</code>.
     */
    public ULong getId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>nogrod.account.address</code>.
     */
    public void setAddress(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>nogrod.account.address</code>.
     */
    public String getAddress() {
        return (String) get(1);
    }

    /**
     * Setter for <code>nogrod.account.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>nogrod.account.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>nogrod.account.pending</code>.
     */
    public void setPending(Long value) {
        set(3, value);
    }

    /**
     * Getter for <code>nogrod.account.pending</code>.
     */
    public Long getPending() {
        return (Long) get(3);
    }

    /**
     * Setter for <code>nogrod.account.min_payout_value</code>.
     */
    public void setMinPayoutValue(Long value) {
        set(4, value);
    }

    /**
     * Getter for <code>nogrod.account.min_payout_value</code>.
     */
    public Long getMinPayoutValue() {
        return (Long) get(4);
    }

    /**
     * Setter for <code>nogrod.account.payout_interval</code>.
     */
    public void setPayoutInterval(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>nogrod.account.payout_interval</code>.
     */
    public String getPayoutInterval() {
        return (String) get(5);
    }

    /**
     * Setter for <code>nogrod.account.next_payout_date</code>.
     */
    public void setNextPayoutDate(Timestamp value) {
        set(6, value);
    }

    /**
     * Getter for <code>nogrod.account.next_payout_date</code>.
     */
    public Timestamp getNextPayoutDate() {
        return (Timestamp) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<ULong, String, String, Long, Long, String, Timestamp> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row7<ULong, String, String, Long, Long, String, Timestamp> valuesRow() {
        return (Row7) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<ULong> field1() {
        return Account.ACCOUNT.ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Account.ACCOUNT.ADDRESS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field3() {
        return Account.ACCOUNT.NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field4() {
        return Account.ACCOUNT.PENDING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Long> field5() {
        return Account.ACCOUNT.MIN_PAYOUT_VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field6() {
        return Account.ACCOUNT.PAYOUT_INTERVAL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Timestamp> field7() {
        return Account.ACCOUNT.NEXT_PAYOUT_DATE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong component1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getAddress();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component3() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component4() {
        return getPending();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long component5() {
        return getMinPayoutValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component6() {
        return getPayoutInterval();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp component7() {
        return getNextPayoutDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ULong value1() {
        return getId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getAddress();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value3() {
        return getName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value4() {
        return getPending();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Long value5() {
        return getMinPayoutValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value6() {
        return getPayoutInterval();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Timestamp value7() {
        return getNextPayoutDate();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value1(ULong value) {
        setId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value2(String value) {
        setAddress(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value3(String value) {
        setName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value4(Long value) {
        setPending(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value5(Long value) {
        setMinPayoutValue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value6(String value) {
        setPayoutInterval(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord value7(Timestamp value) {
        setNextPayoutDate(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public AccountRecord values(ULong value1, String value2, String value3, Long value4, Long value5, String value6, Timestamp value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountRecord
     */
    public AccountRecord() {
        super(Account.ACCOUNT);
    }

    /**
     * Create a detached, initialised AccountRecord
     */
    public AccountRecord(ULong id, String address, String name, Long pending, Long minPayoutValue, String payoutInterval, Timestamp nextPayoutDate) {
        super(Account.ACCOUNT);

        set(0, id);
        set(1, address);
        set(2, name);
        set(3, pending);
        set(4, minPayoutValue);
        set(5, payoutInterval);
        set(6, nextPayoutDate);
    }
}
