/*
 * This file is generated by jOOQ.
 */
package burst.pool.migrator.nogroddb.nogrod.tables;


import burst.pool.migrator.nogroddb.nogrod.Indexes;
import burst.pool.migrator.nogroddb.nogrod.Keys;
import burst.pool.migrator.nogroddb.nogrod.Nogrod;
import burst.pool.migrator.nogroddb.nogrod.tables.records.BlockRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Block extends TableImpl<BlockRecord> {

    private static final long serialVersionUID = 593806709;

    /**
     * The reference instance of <code>nogrod.block</code>
     */
    public static final Block BLOCK = new Block();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlockRecord> getRecordType() {
        return BlockRecord.class;
    }

    /**
     * The column <code>nogrod.block.height</code>.
     */
    public final TableField<BlockRecord, ULong> HEIGHT = createField("height", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>nogrod.block.base_target</code>.
     */
    public final TableField<BlockRecord, ULong> BASE_TARGET = createField("base_target", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>nogrod.block.scoop</code>.
     */
    public final TableField<BlockRecord, UInteger> SCOOP = createField("scoop", org.jooq.impl.SQLDataType.INTEGERUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>nogrod.block.generation_signature</code>.
     */
    public final TableField<BlockRecord, String> GENERATION_SIGNATURE = createField("generation_signature", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>nogrod.block.winner_verified</code>.
     */
    public final TableField<BlockRecord, Byte> WINNER_VERIFIED = createField("winner_verified", org.jooq.impl.SQLDataType.TINYINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.TINYINT)), this, "");

    /**
     * The column <code>nogrod.block.reward</code>.
     */
    public final TableField<BlockRecord, Long> REWARD = createField("reward", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>nogrod.block.winner_id</code>.
     */
    public final TableField<BlockRecord, ULong> WINNER_ID = createField("winner_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINTUNSIGNED)), this, "");

    /**
     * The column <code>nogrod.block.best_nonce_submission_id</code>.
     */
    public final TableField<BlockRecord, Long> BEST_NONCE_SUBMISSION_ID = createField("best_nonce_submission_id", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>nogrod.block.created</code>.
     */
    public final TableField<BlockRecord, Timestamp> CREATED = createField("created", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>nogrod.block.generation_time</code>.
     */
    public final TableField<BlockRecord, Integer> GENERATION_TIME = createField("generation_time", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("240", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>nogrod.block</code> table reference
     */
    public Block() {
        this(DSL.name("block"), null);
    }

    /**
     * Create an aliased <code>nogrod.block</code> table reference
     */
    public Block(String alias) {
        this(DSL.name(alias), BLOCK);
    }

    /**
     * Create an aliased <code>nogrod.block</code> table reference
     */
    public Block(Name alias) {
        this(alias, BLOCK);
    }

    private Block(Name alias, Table<BlockRecord> aliased) {
        this(alias, aliased, null);
    }

    private Block(Name alias, Table<BlockRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Block(Table<O> child, ForeignKey<O, BlockRecord> key) {
        super(child, key, BLOCK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Nogrod.NOGROD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.BLOCK_NONCE_SUBMISSION_FK_IDX, Indexes.BLOCK_PRIMARY, Indexes.BLOCK_WINNER_ACCOUNT_FK_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<BlockRecord> getPrimaryKey() {
        return Keys.KEY_BLOCK_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<BlockRecord>> getKeys() {
        return Arrays.<UniqueKey<BlockRecord>>asList(Keys.KEY_BLOCK_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Block as(String alias) {
        return new Block(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Block as(Name alias) {
        return new Block(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(String name) {
        return new Block(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Block rename(Name name) {
        return new Block(name, null);
    }
}
