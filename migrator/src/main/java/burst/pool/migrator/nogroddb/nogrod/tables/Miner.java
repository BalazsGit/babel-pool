/*
 * This file is generated by jOOQ.
 */
package burst.pool.migrator.nogroddb.nogrod.tables;


import burst.pool.migrator.nogroddb.nogrod.Indexes;
import burst.pool.migrator.nogroddb.nogrod.Keys;
import burst.pool.migrator.nogroddb.nogrod.Nogrod;
import burst.pool.migrator.nogroddb.nogrod.tables.records.MinerRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Miner extends TableImpl<MinerRecord> {

    private static final long serialVersionUID = 155066173;

    /**
     * The reference instance of <code>nogrod.miner</code>
     */
    public static final Miner MINER = new Miner();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MinerRecord> getRecordType() {
        return MinerRecord.class;
    }

    /**
     * The column <code>nogrod.miner.id</code>.
     */
    public final TableField<MinerRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>nogrod.miner.capacity</code>.
     */
    public final TableField<MinerRecord, Long> CAPACITY = createField("capacity", org.jooq.impl.SQLDataType.BIGINT.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * Create a <code>nogrod.miner</code> table reference
     */
    public Miner() {
        this(DSL.name("miner"), null);
    }

    /**
     * Create an aliased <code>nogrod.miner</code> table reference
     */
    public Miner(String alias) {
        this(DSL.name(alias), MINER);
    }

    /**
     * Create an aliased <code>nogrod.miner</code> table reference
     */
    public Miner(Name alias) {
        this(alias, MINER);
    }

    private Miner(Name alias, Table<MinerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Miner(Name alias, Table<MinerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Miner(Table<O> child, ForeignKey<O, MinerRecord> key) {
        super(child, key, MINER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Nogrod.NOGROD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MINER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MinerRecord> getPrimaryKey() {
        return Keys.KEY_MINER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MinerRecord>> getKeys() {
        return Arrays.<UniqueKey<MinerRecord>>asList(Keys.KEY_MINER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Miner as(String alias) {
        return new Miner(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Miner as(Name alias) {
        return new Miner(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Miner rename(String name) {
        return new Miner(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Miner rename(Name name) {
        return new Miner(name, null);
    }
}
