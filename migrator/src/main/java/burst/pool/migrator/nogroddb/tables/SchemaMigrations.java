/*
 * This file is generated by jOOQ.
 */
package burst.pool.migrator.nogroddb.tables;


import burst.pool.migrator.nogroddb.Indexes;
import burst.pool.migrator.nogroddb.Keys;
import burst.pool.migrator.nogroddb.NogrodVlp;
import burst.pool.migrator.nogroddb.tables.records.SchemaMigrationsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaMigrations extends TableImpl<SchemaMigrationsRecord> {

    private static final long serialVersionUID = -1008489534;

    /**
     * The reference instance of <code>nogrod_vlp.schema_migrations</code>
     */
    public static final SchemaMigrations SCHEMA_MIGRATIONS = new SchemaMigrations();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SchemaMigrationsRecord> getRecordType() {
        return SchemaMigrationsRecord.class;
    }

    /**
     * The column <code>nogrod_vlp.schema_migrations.version</code>.
     */
    public final TableField<SchemaMigrationsRecord, Long> VERSION = createField("version", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nogrod_vlp.schema_migrations.dirty</code>.
     */
    public final TableField<SchemaMigrationsRecord, Byte> DIRTY = createField("dirty", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * Create a <code>nogrod_vlp.schema_migrations</code> table reference
     */
    public SchemaMigrations() {
        this(DSL.name("schema_migrations"), null);
    }

    /**
     * Create an aliased <code>nogrod_vlp.schema_migrations</code> table reference
     */
    public SchemaMigrations(String alias) {
        this(DSL.name(alias), SCHEMA_MIGRATIONS);
    }

    /**
     * Create an aliased <code>nogrod_vlp.schema_migrations</code> table reference
     */
    public SchemaMigrations(Name alias) {
        this(alias, SCHEMA_MIGRATIONS);
    }

    private SchemaMigrations(Name alias, Table<SchemaMigrationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SchemaMigrations(Name alias, Table<SchemaMigrationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> SchemaMigrations(Table<O> child, ForeignKey<O, SchemaMigrationsRecord> key) {
        super(child, key, SCHEMA_MIGRATIONS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return NogrodVlp.NOGROD_VLP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCHEMA_MIGRATIONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SchemaMigrationsRecord> getPrimaryKey() {
        return Keys.KEY_SCHEMA_MIGRATIONS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SchemaMigrationsRecord>> getKeys() {
        return Arrays.<UniqueKey<SchemaMigrationsRecord>>asList(Keys.KEY_SCHEMA_MIGRATIONS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaMigrations as(String alias) {
        return new SchemaMigrations(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public SchemaMigrations as(Name alias) {
        return new SchemaMigrations(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaMigrations rename(String name) {
        return new SchemaMigrations(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SchemaMigrations rename(Name name) {
        return new SchemaMigrations(name, null);
    }
}
