/*
 * This file is generated by jOOQ.
 */
package burst.pool.migrator.nogroddb.tables;


import burst.pool.migrator.nogroddb.Indexes;
import burst.pool.migrator.nogroddb.Keys;
import burst.pool.migrator.nogroddb.NogrodVlp;
import burst.pool.migrator.nogroddb.tables.records.TransactionRecipientRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionRecipient extends TableImpl<TransactionRecipientRecord> {

    private static final long serialVersionUID = 304973398;

    /**
     * The reference instance of <code>nogrod_vlp.transaction_recipient</code>
     */
    public static final TransactionRecipient TRANSACTION_RECIPIENT = new TransactionRecipient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionRecipientRecord> getRecordType() {
        return TransactionRecipientRecord.class;
    }

    /**
     * The column <code>nogrod_vlp.transaction_recipient.id</code>.
     */
    public final TableField<TransactionRecipientRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>nogrod_vlp.transaction_recipient.transaction_id</code>.
     */
    public final TableField<TransactionRecipientRecord, Long> TRANSACTION_ID = createField("transaction_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>nogrod_vlp.transaction_recipient.recipient_id</code>.
     */
    public final TableField<TransactionRecipientRecord, ULong> RECIPIENT_ID = createField("recipient_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>nogrod_vlp.transaction_recipient.amount</code>.
     */
    public final TableField<TransactionRecipientRecord, Long> AMOUNT = createField("amount", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>nogrod_vlp.transaction_recipient</code> table reference
     */
    public TransactionRecipient() {
        this(DSL.name("transaction_recipient"), null);
    }

    /**
     * Create an aliased <code>nogrod_vlp.transaction_recipient</code> table reference
     */
    public TransactionRecipient(String alias) {
        this(DSL.name(alias), TRANSACTION_RECIPIENT);
    }

    /**
     * Create an aliased <code>nogrod_vlp.transaction_recipient</code> table reference
     */
    public TransactionRecipient(Name alias) {
        this(alias, TRANSACTION_RECIPIENT);
    }

    private TransactionRecipient(Name alias, Table<TransactionRecipientRecord> aliased) {
        this(alias, aliased, null);
    }

    private TransactionRecipient(Name alias, Table<TransactionRecipientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TransactionRecipient(Table<O> child, ForeignKey<O, TransactionRecipientRecord> key) {
        super(child, key, TRANSACTION_RECIPIENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return NogrodVlp.NOGROD_VLP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRANSACTION_RECIPIENT_ACCOUNT_FK_IDX, Indexes.TRANSACTION_RECIPIENT_PRIMARY, Indexes.TRANSACTION_RECIPIENT_TRANSACTION_FK_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TransactionRecipientRecord, Long> getIdentity() {
        return Keys.IDENTITY_TRANSACTION_RECIPIENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TransactionRecipientRecord> getPrimaryKey() {
        return Keys.KEY_TRANSACTION_RECIPIENT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TransactionRecipientRecord>> getKeys() {
        return Arrays.<UniqueKey<TransactionRecipientRecord>>asList(Keys.KEY_TRANSACTION_RECIPIENT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<TransactionRecipientRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TransactionRecipientRecord, ?>>asList(Keys.TRANSACTION_RECIPIENT_TRANSACTION_FK, Keys.TRANSACTION_RECIPIENT_ACCOUNT_FK);
    }

    public Transaction transaction() {
        return new Transaction(this, Keys.TRANSACTION_RECIPIENT_TRANSACTION_FK);
    }

    public Account account() {
        return new Account(this, Keys.TRANSACTION_RECIPIENT_ACCOUNT_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionRecipient as(String alias) {
        return new TransactionRecipient(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public TransactionRecipient as(Name alias) {
        return new TransactionRecipient(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionRecipient rename(String name) {
        return new TransactionRecipient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TransactionRecipient rename(Name name) {
        return new TransactionRecipient(name, null);
    }
}
